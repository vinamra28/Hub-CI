apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: api-deploy
spec:
  params:
    - name: IMAGE
    - name: TAG
    - name: HUB_NAMESPACE
    - name: K8S_VARIANT
  workspaces:
    - name: shared-workspace
    - name: kubeconfig-dir
      optional: true
    - name: token
  tasks:
    - name: fetch-repository
      taskRef:
        name: git-clone
      workspaces:
        - name: output
          workspace: shared-workspace
      params:
        - name: url
          value: https://github.com/sm43/hub
        - name: subdirectory
          value: ""
        - name: deleteExisting
          value: "true"
        - name: revision
          value: cicd
    - name: unit-test
      taskRef:
        name: golang-db-test
      workspaces:
        - name: source
          workspace: shared-workspace
      params:
        - name: package
          value: github.com/sm43/hub
        - name: packages
          value: ./pkg/...
        - name: path_context
          value: api
        - name: flags
          value: "-p 1 -v --timeout 10m -race -coverprofile=$(workspaces.source.path)/coverage.txt -covermode=atomic"
      runAfter:
        - fetch-repository
    - name: upload-coverage
      taskRef:
        name: codecov
      params:
        - name: args
          value:
            - -f
            - $(workspaces.source.path)/coverage.txt
        - name: codecov-token-secret
          value: codecov
        - name: codecov-token-secret-key
          value: codecov
      workspaces:
        - name: source
          workspace: shared-workspace
      runAfter:
        - unit-test
    - name: build-push-image
      taskRef:
        name: buildah
      workspaces:
        - name: source
          workspace: shared-workspace
      params:
        - name: IMAGE
          value: $(params.IMAGE):$(params.TAG)
        - name: CONTEXT
          value: "api"
        - name: FORMAT
          value: "docker"
      runAfter:
        - unit-test
    - name: check-api-deployment
      taskRef:
        name: kubernetes-actions
      params:
        - name: script
          value: |
            kubectl describe deployment api -n "$(params.HUB_NAMESPACE)" >/dev/null 2>/dev/null
            if [[ $? -eq 0 ]]; then
              printf yes | tee /tekton/results/output-result
            else
              printf no | tee /tekton/results/output-result
            fi
      runAfter:
        - build-push-image
      workspaces:
        - name: kubeconfig-dir
          workspace: kubeconfig-dir
    - name: patch-api-image
      taskRef:
        name: kubernetes-actions
      params:
        - name: script
          value: |
            kubectl patch deployment api --patch='{"spec":{"template":{"spec":{
              "containers":[{
                "name": "api",
                "image": "$(params.IMAGE):$(params.TAG)"
              }]
            }}}}' -n $(params.HUB_NAMESPACE)
      when:
        - input: "$(tasks.check-api-deployment.results.output-result)"
          operator: in
          values: ["yes"]
      workspaces:
        - name: kubeconfig-dir
          workspace: kubeconfig-dir
    - name: replace-config-token
      taskRef:
        name: replace-tokens
      workspaces:
        - name: source
          workspace: shared-workspace
        - name: token
          workspace: token
      params:
        - name: inputFilePath
          value: api/config/00-config/31-api-secret.yaml
      when:
        - input: "$(tasks.check-api-deployment.results.output-result)"
          operator: in
          values: ["no"]
    - name: create-deployment
      taskRef:
        name: kubernetes-actions
      workspaces:
        - name: manifest-dir
          workspace: shared-workspace
        - name: kubeconfig-dir
          workspace: kubeconfig-dir
      params:
        - name: script
          value: |
            kubectl apply --filename api/config/00-config
            kubectl apply --filename api/config
            [[ "$(params.K8S_VARIANT)" == "openshift" ]] && \
            kubectl apply --filename api/config/openshift || \
            kubectl apply --filename api/config/99-post-deploy/33-api-ingress.yaml
            kubectl apply --filename api/config/99-post-deploy/34-catalog-refresh-secret.yaml
            # patch the latest built image
            kubectl patch deployment api --patch='{"spec":{"template":{"spec":{
              "containers":[{
                "name": "api",
                "image": "$(params.IMAGE):$(params.TAG)"
              }]
            }}}}' -n $(params.HUB_NAMESPACE)
      runAfter:
        - replace-config-token
